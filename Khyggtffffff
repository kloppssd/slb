local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local GuiService = game:GetService("GuiService")

-- Simple Maid implementation
local Maid = {}
Maid.__index = Maid

function Maid.new()
    return setmetatable({
        _tasks = {}
    }, Maid)
end

function Maid:GiveTask(task)
    table.insert(self._tasks, task)
    return task
end

function Maid:DoCleaning()
    for _, task in ipairs(self._tasks) do
        if typeof(task) == "function" then
            task()
        elseif typeof(task) == "thread" then
            task.cancel(task)
        elseif typeof(task) == "RBXScriptConnection" then
            task:Disconnect()
        elseif typeof(task) == "Instance" then
            task:Destroy()
        elseif task.Destroy then
            task:Destroy()
        end
    end
    self._tasks = {}
end

function Maid:Destroy()
    self:DoCleaning()
end

-- UIManager with enhanced visuals and mobile support
local UIManager = {}
UIManager.__index = UIManager

function UIManager.new()
    local self = setmetatable({}, UIManager)
    
    self._ToggleStates = {}
    
    -- Create ScreenGui
    self._ScreenGui = Instance.new("ScreenGui")
    self._ScreenGui.Name = "MingleUI"
    self._ScreenGui.ResetOnSpawn = false
    self._ScreenGui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")
    
    -- Create main frame (smaller for mobile)
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 250, 0, 120)
    MainFrame.Position = UDim2.new(0.5, -125, 0.5, -60)
    MainFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
    MainFrame.BorderSizePixel = 0
    MainFrame.Parent = self._ScreenGui
    
    -- Add main corner radius
    local MainCorner = Instance.new("UICorner")
    MainCorner.CornerRadius = UDim.new(0, 12)
    MainCorner.Parent = MainFrame
    
    -- Add gradient background
    local Gradient = Instance.new("UIGradient")
    Gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(15, 15, 20)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(25, 25, 35))
    })
    Gradient.Rotation = 45
    Gradient.Parent = MainFrame
    
    -- Add stroke
    local Stroke = Instance.new("UIStroke")
    Stroke.Color = Color3.fromRGB(85, 170, 255)
    Stroke.Thickness = 1.5
    Stroke.Transparency = 0.3
    Stroke.Parent = MainFrame
    
    -- Create animated particles background
    local ParticleFrame = Instance.new("Frame")
    ParticleFrame.Name = "ParticleFrame"
    ParticleFrame.Size = UDim2.new(1, 0, 1, 0)
    ParticleFrame.Position = UDim2.new(0, 0, 0, 0)
    ParticleFrame.BackgroundTransparency = 1
    ParticleFrame.ClipsDescendants = true
    ParticleFrame.Parent = MainFrame
    
    local ParticleCorner = Instance.new("UICorner")
    ParticleCorner.CornerRadius = UDim.new(0, 12)
    ParticleCorner.Parent = ParticleFrame
    
    -- Create floating particles
    for i = 1, 8 do
        local Particle = Instance.new("Frame")
        Particle.Name = "Particle" .. i
        Particle.Size = UDim2.new(0, math.random(2, 4), 0, math.random(2, 4))
        Particle.Position = UDim2.new(math.random(), 0, math.random(), 0)
        Particle.BackgroundColor3 = Color3.fromRGB(85, 170, 255)
        Particle.BorderSizePixel = 0
        Particle.BackgroundTransparency = 0.7
        Particle.Parent = ParticleFrame
        
        local PCorner = Instance.new("UICorner")
        PCorner.CornerRadius = UDim.new(1, 0)
        PCorner.Parent = Particle
        
        -- Animate particles
        local function AnimateParticle()
            local tween = TweenService:Create(
                Particle,
                TweenInfo.new(math.random(3, 6), Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true),
                {
                    Position = UDim2.new(math.random(), 0, math.random(), 0),
                    BackgroundTransparency = math.random(30, 90) / 100
                }
            )
            tween:Play()
        end
        AnimateParticle()
    end
    
    -- Create title with glow effect
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.Size = UDim2.new(1, -40, 0, 25)
    Title.Position = UDim2.new(0, 10, 0, 5)
    Title.BackgroundTransparency = 1
    Title.Text = "âœ¨ Mingle Auto"
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextScaled = true
    Title.Font = Enum.Font.GothamBold
    Title.Parent = MainFrame
    
    -- Add text stroke for glow effect
    local TitleStroke = Instance.new("UIStroke")
    TitleStroke.Color = Color3.fromRGB(85, 170, 255)
    TitleStroke.Thickness = 1
    TitleStroke.Transparency = 0.5
    TitleStroke.Parent = Title
    
    -- Create toggle button with enhanced design
    local ToggleButton = Instance.new("TextButton")
    ToggleButton.Name = "MinglePowerHoldAutoToggle"
    ToggleButton.Size = UDim2.new(0.85, 0, 0, 35)
    ToggleButton.Position = UDim2.new(0.075, 0, 0.45, 0)
    ToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
    ToggleButton.BorderSizePixel = 0
    ToggleButton.Text = "ðŸ”´ AutoLuis: OFF"
    ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    ToggleButton.TextScaled = true
    ToggleButton.Font = Enum.Font.GothamSemibold
    ToggleButton.Parent = MainFrame
    
    -- Add button styling
    local ButtonCorner = Instance.new("UICorner")
    ButtonCorner.CornerRadius = UDim.new(0, 8)
    ButtonCorner.Parent = ToggleButton
    
    local ButtonStroke = Instance.new("UIStroke")
    ButtonStroke.Color = Color3.fromRGB(255, 100, 100)
    ButtonStroke.Thickness = 1
    ButtonStroke.Transparency = 0.6
    ButtonStroke.Parent = ToggleButton
    
    local ButtonGradient = Instance.new("UIGradient")
    ButtonGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(60, 60, 70)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 40, 50))
    })
    ButtonGradient.Rotation = 90
    ButtonGradient.Parent = ToggleButton
    
    -- Initialize toggle state
    self._ToggleStates["MinglePowerHoldAuto"] = false
    
    -- Button click event with animation
    ToggleButton.MouseButton1Click:Connect(function()
        -- Button click animation
        local clickTween = TweenService:Create(
            ToggleButton,
            TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut, 0, true),
            {Size = UDim2.new(0.82, 0, 0, 33)}
        )
        clickTween:Play()
        
        self:ToggleValue("MinglePowerHoldAuto")
        local isOn = self._ToggleStates["MinglePowerHoldAuto"]
        
        if isOn then
            -- ON state
            local onTween = TweenService:Create(
                ToggleButton,
                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {BackgroundColor3 = Color3.fromRGB(40, 80, 40)}
            )
            onTween:Play()
            
            ButtonStroke.Color = Color3.fromRGB(100, 255, 100)
            ButtonGradient.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.fromRGB(50, 90, 50)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(30, 70, 30))
            })
            ToggleButton.Text = "ðŸŸ¢ AutoLuis: ON"
        else
            -- OFF state
            local offTween = TweenService:Create(
                ToggleButton,
                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {BackgroundColor3 = Color3.fromRGB(50, 50, 60)}
            )
            offTween:Play()
            
            ButtonStroke.Color = Color3.fromRGB(255, 100, 100)
            ButtonGradient.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.fromRGB(60, 60, 70)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 40, 50))
            })
            ToggleButton.Text = "ðŸ”´ AutoLuis: OFF"
        end
    end)
    
    -- Create close/minimize button
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Size = UDim2.new(0, 20, 0, 20)
    CloseButton.Position = UDim2.new(1, -25, 0, 5)
    CloseButton.BackgroundColor3 = Color3.fromRGB(80, 40, 40)
    CloseButton.BorderSizePixel = 0
    CloseButton.Text = "Ã—"
    CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseButton.TextScaled = true
    CloseButton.Font = Enum.Font.GothamBold
    CloseButton.Parent = MainFrame
    
    local CloseCorner = Instance.new("UICorner")
    CloseCorner.CornerRadius = UDim.new(0, 6)
    CloseCorner.Parent = CloseButton
    
    local CloseStroke = Instance.new("UIStroke")
    CloseStroke.Color = Color3.fromRGB(255, 150, 150)
    CloseStroke.Thickness = 1
    CloseStroke.Transparency = 0.7
    CloseStroke.Parent = CloseButton
    
    CloseButton.MouseButton1Click:Connect(function()
        local closeTween = TweenService:Create(
            MainFrame,
            TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In),
            {
                Size = UDim2.new(0, 0, 0, 0),
                Position = UDim2.new(0.5, 0, 0.5, 0)
            }
        )
        closeTween:Play()
        
        closeTween.Completed:Connect(function()
            MainFrame.Visible = false
            MainFrame.Size = UDim2.new(0, 250, 0, 120)
            MainFrame.Position = UDim2.new(0.5, -125, 0.5, -60)
        end)
    end)
    
    -- Status indicator
    local StatusDot = Instance.new("Frame")
    StatusDot.Name = "StatusDot"
    StatusDot.Size = UDim2.new(0, 8, 0, 8)
    StatusDot.Position = UDim2.new(0, 10, 1, -15)
    StatusDot.BackgroundColor3 = Color3.fromRGB(100, 255, 100)
    StatusDot.BorderSizePixel = 0
    StatusDot.Parent = MainFrame
    
    local StatusCorner = Instance.new("UICorner")
    StatusCorner.CornerRadius = UDim.new(1, 0)
    StatusCorner.Parent = StatusDot
    
    -- Animate status dot
    local dotTween = TweenService:Create(
        StatusDot,
        TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true),
        {BackgroundTransparency = 0.3}
    )
    dotTween:Play()
    
    -- Make draggable for both PC and Mobile
    self:_MakeDraggable(MainFrame)
    
    -- Toggle UI with F key (PC) or show/hide animation
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        if input.KeyCode == Enum.KeyCode.F then
            if MainFrame.Visible then
                local hideTween = TweenService:Create(
                    MainFrame,
                    TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In),
                    {
                        Size = UDim2.new(0, 0, 0, 0),
                        Position = UDim2.new(0.5, 0, 0.5, 0)
                    }
                )
                hideTween:Play()
                hideTween.Completed:Connect(function()
                    MainFrame.Visible = false
                    MainFrame.Size = UDim2.new(0, 250, 0, 120)
                    MainFrame.Position = UDim2.new(0.5, -125, 0.5, -60)
                end)
            else
                MainFrame.Visible = true
                MainFrame.Size = UDim2.new(0, 0, 0, 0)
                MainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
                local showTween = TweenService:Create(
                    MainFrame,
                    TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
                    {
                        Size = UDim2.new(0, 250, 0, 120),
                        Position = UDim2.new(0.5, -125, 0.5, -60)
                    }
                )
                showTween:Play()
            end
        end
    end)
    
    return self
end

function UIManager:_MakeDraggable(frame)
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    local function startDrag(input)
        dragging = true
        dragStart = input.Position
        startPos = frame.Position
    end
    
    local function updateDrag(input)
        if dragging then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end
    
    local function endDrag()
        dragging = false
    end
    
    -- PC Support
    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            startDrag(input)
        end
    end)
    
    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            updateDrag(input)
        end
    end)
    
    frame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            endDrag()
        end
    end)
    
    -- Mobile Support
    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch then
            startDrag(input)
        end
    end)
    
    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch then
            updateDrag(input)
        end
    end)
    
    frame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch then
            endDrag()
        end
    end)
end

function UIManager:GetToggleValue(toggleName)
    return self._ToggleStates[toggleName] or false
end

function UIManager:ToggleValue(toggleName)
    self._ToggleStates[toggleName] = not (self._ToggleStates[toggleName] or false)
end

function UIManager:Destroy()
    if self._ScreenGui then
        self._ScreenGui:Destroy()
    end
end

-- Mingle System (Silent operation - minimal prints)
local Mingle = {}
Mingle.__index = Mingle

function Mingle.new(UIManager)
    local self = setmetatable({}, Mingle)

    self._UIManager = UIManager
    self._Maid = Maid.new()

    return self
end

function Mingle:Start()
    local Client = Players.LocalPlayer

    local CharacterMaid = Maid.new()
    self._Maid:GiveTask(CharacterMaid)

    local function OnCharacterAdded(Character)
        CharacterMaid:DoCleaning()

        local activeQTERemotes = {}
        
        local function TestIfQTERemote(remote)
            -- Silent testing - same logic but no spam prints
            local success, err = pcall(function()
                remote:FireServer()
            end)
            
            if success then
                return true
            end
            
            -- Check for UI elements nearby
            if remote.Parent then
                local hasUIElements = false
                for _, child in ipairs(remote.Parent:GetDescendants()) do
                    if child:IsA("GuiObject") or child:IsA("SurfaceGui") or child:IsA("BillboardGui") then
                        hasUIElements = true
                        break
                    end
                end
                if hasUIElements then
                    return true
                end
            end
            
            -- Check parent type
            if remote.Parent then
                local parentClass = remote.Parent.ClassName
                if parentClass == "Tool" or parentClass == "Model" or parentClass == "Folder" then
                    return true
                end
            end
            
            return true -- Test all RemoteEvents as potential QTEs
        end
        
        local function StartQTEAutoClick(remote)
            if activeQTERemotes[remote] then
                return
            end
            
            activeQTERemotes[remote] = true
            
            CharacterMaid:GiveTask(task.spawn(function()    
                local clickCount = 0
                while task.wait(0.5) do
                    if not remote then 
                        break 
                    end    
                    if not remote.Parent then 
                        break 
                    end    

                    if self._UIManager:GetToggleValue("MinglePowerHoldAuto") then    
                        local success, err = pcall(function()
                            remote:FireServer()
                        end)
                        if success then
                            clickCount = clickCount + 1
                        else
                            if clickCount == 0 then
                                break
                            end
                        end
                    end    
                end
                
                activeQTERemotes[remote] = nil
            end))    
        end    

        local function ScanAndTestAllRemotes(parent)
            for _, obj in ipairs(parent:GetDescendants()) do
                if obj.ClassName == "RemoteEvent" then
                    if TestIfQTERemote(obj) then
                        StartQTEAutoClick(obj)
                    end
                end
            end
        end

        local function OnAnyChildAdded(Object)    
            if Object.ClassName == "RemoteEvent" then
                task.wait(0.1)
                
                if TestIfQTERemote(Object) then
                    StartQTEAutoClick(Object)
                end
            end
            
            if Object.ClassName == "Folder" or Object.ClassName == "Model" or 
               Object.ClassName == "Part" or Object.ClassName == "Tool" then
                task.wait(0.2)
                ScanAndTestAllRemotes(Object)
            end
        end    

        CharacterMaid:GiveTask(Character.ChildAdded:Connect(OnAnyChildAdded))
        
        for _, Object in ipairs(Character:GetChildren()) do    
            task.spawn(OnAnyChildAdded, Object)    
        end
        
        CharacterMaid:GiveTask(Character.DescendantAdded:Connect(function(Object)
            if Object.ClassName == "RemoteEvent" then    
                task.spawn(function()
                    task.wait(0.1)
                    if TestIfQTERemote(Object) then
                        StartQTEAutoClick(Object)
                    end
                end)
            end
        end))
        
        ScanAndTestAllRemotes(Character)
    end

    self._Maid:GiveTask(Client.CharacterAdded:Connect(OnCharacterAdded))
    if Client.Character then
        task.spawn(OnCharacterAdded, Client.Character)
    end

    warn("LuisChoke started! l2vy")
end

function Mingle:Destroy()
    warn("LuisChoke destroyed! l2vy")
    self._Maid:Destroy()
end

-- Initialize the complete system
local function StartMingleSystem()
    local uiManager = UIManager.new()
    local mingle = Mingle.new(uiManager)
    mingle:Start()
    
    print("===============================")
    
    return {
        UIManager = uiManager,
        Mingle = mingle
    }
end

-- Start the system
return StartMingleSystem()
