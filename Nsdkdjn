-- Game ID Check
if game.PlaceId ~= 1962086868 then
    game.Players.LocalPlayer:Kick("Not supported game")
    return
end

-- Anti-Kick Protection
task.spawn(function()
    local success, err = pcall(function()
        local registry = getreg and getreg() or debug.getregistry()
        for _, func in pairs(registry) do
            if type(func) == "function" then
                local info = debug.getinfo(func)
                if info and info.name == "kick" then
                    if hookfunction then
                        hookfunction(func, function() return nil end)
                    else
                        error("hookfunction not supported")
                    end
                    break
                end
            end
        end
    end)

    if not success then
        task.wait(0.5)
        game.Players.LocalPlayer:Kick("Your executor doesn't support Anti-Kick. Try Ronix or Velocity or something good you fag")
    end
end)

-- Load WindUI
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

local ui = WindUI:CreateWindow({
    Title = "PEA HUB",
    Icon = "gitlab",
    Author = "Grow A Garden",
    Folder = "1.0",
    Size = UDim2.fromOffset(210, 105),
    Transparent = true,
    IsOpenButtonEnabled = true,
    User = {
        Enabled = true,
        Anonymous = false
    },
    SideBarWidth = 125,
})

ui:Tag({
    Title = "BETA",
    Color = Color3.fromHex("#30ff6a")
})

-- Services
local player = game.Players.LocalPlayer
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer

-- Create Tabs
local TOHTab = ui:Tab({
    Title = "TOH",
    Icon = "tower",
    Locked = false,
})

local MiscTab = ui:Tab({
    Title = "Misc",
    Icon = "settings",
    Locked = false,
})

-- God Mode Variables and System
local godModeEnabled = false
local healthConnection = nil

-- Always-running kill parts watcher
local killPartsWatcher = workspace.DescendantAdded:Connect(function(descendant)
    if godModeEnabled and descendant:IsA("BasePart") and descendant.Name:lower():find("kill") then
        task.wait(0.1)
        descendant.CanTouch = false
        local touch = descendant:FindFirstChildWhichIsA("TouchTransmitter", true)
        if touch then touch:Destroy() end
    end
end)

local function protectFromKillParts()
    for _, part in ipairs(workspace:GetDescendants()) do
        if part:IsA("BasePart") and part.Name:lower():find("kill") then
            part.CanTouch = false
            local touch = part:FindFirstChildWhichIsA("TouchTransmitter", true)
            if touch then touch:Destroy() end
        end
    end
end

local function unprotectFromKillParts()
    for _, part in ipairs(workspace:GetDescendants()) do
        if part:IsA("BasePart") and part.Name:lower():find("kill") then
            part.CanTouch = true
        end
    end
end

local function activateGodMode()
    local char = player.Character or player.CharacterAdded:Wait()
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    humanoid.Health = humanoid.MaxHealth

    healthConnection = humanoid.HealthChanged:Connect(function()
        if godModeEnabled and humanoid.Health < humanoid.MaxHealth then
            humanoid.Health = humanoid.MaxHealth
        end
    end)

    protectFromKillParts()
end

local function deactivateGodMode()
    local char = player.Character
    if not char then return end
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if humanoid and healthConnection then
        healthConnection:Disconnect()
        healthConnection = nil
    end

    unprotectFromKillParts()
end

-- Fly Variables and System
local flyToggle = false
local flySpeed = 50
local smoothness = 0.1
local FLYING = false
local flyKeyDown, flyKeyUp, mfly1, mfly2
local currentVelocity = Vector3.new(0, 0, 0)
local targetVelocity = Vector3.new(0, 0, 0)
local flyGui = nil
local flyButton = nil
local flyGuiEnabled = false

local function sFLY()
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return
    end
    
    local T = LocalPlayer.Character:WaitForChild("HumanoidRootPart")
    local CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
    local BG = Instance.new('BodyGyro', T)
    local BV = Instance.new('BodyVelocity', T)
    BG.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
    BG.P = 9e4
    BV.MaxForce = Vector3.new(9e9, 9e9, 9e9)
    BG.CFrame = T.CFrame
    BV.Velocity = Vector3.new(0, 0, 0)

    local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")

    flyKeyDown = UserInputService.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Keyboard then
            local KEY = input.KeyCode.Name
            if KEY == "W" then CONTROL.F = flySpeed end
            if KEY == "S" then CONTROL.B = -flySpeed end
            if KEY == "A" then CONTROL.L = -flySpeed end
            if KEY == "D" then CONTROL.R = flySpeed end
            if KEY == "E" then CONTROL.Q = flySpeed * 2 end
            if KEY == "Q" then CONTROL.E = -flySpeed * 2 end
            workspace.CurrentCamera.CameraType = Enum.CameraType.Track
        end
    end)

    flyKeyUp = UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Keyboard then
            local KEY = input.KeyCode.Name
            if KEY == "W" then CONTROL.F = 0 end
            if KEY == "S" then CONTROL.B = 0 end
            if KEY == "A" then CONTROL.L = 0 end
            if KEY == "D" then CONTROL.R = 0 end
            if KEY == "E" then CONTROL.Q = 0 end
            if KEY == "Q" then CONTROL.E = 0 end
        end
    end)

    mfly2 = RunService.Heartbeat:Connect(function()
        if not FLYING or not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then 
            return 
        end
        
        humanoid.PlatformStand = true
        BG.CFrame = workspace.CurrentCamera.CoordinateFrame

        local direction = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (CONTROL.F + CONTROL.B)) +
                           (workspace.CurrentCamera.CoordinateFrame * CFrame.new(CONTROL.L + CONTROL.R, (CONTROL.F + CONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p - workspace.CurrentCamera.CoordinateFrame.p))

        targetVelocity = direction * flySpeed
        currentVelocity = currentVelocity:Lerp(targetVelocity, smoothness)
        BV.Velocity = currentVelocity
    end)

    FLYING = true
end

local function MobileFly()
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return
    end
    
    local root = LocalPlayer.Character:WaitForChild("HumanoidRootPart")
    local camera = workspace.CurrentCamera
    local v3inf = Vector3.new(9e9, 9e9, 9e9)
    local controlModule = require(LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule"))

    local BV = Instance.new("BodyVelocity", root)
    BV.MaxForce = v3inf
    BV.Velocity = Vector3.new(0, 0, 0)

    local BG = Instance.new("BodyGyro", root)
    BG.MaxTorque = v3inf
    BG.P = 1000
    BG.D = 50

    local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")

    mfly1 = LocalPlayer.CharacterAdded:Connect(function(char)
        if char:FindFirstChild("HumanoidRootPart") then
            root = char:WaitForChild("HumanoidRootPart")
            BV.Parent = root
            BG.Parent = root
        end
    end)

    mfly2 = RunService.Heartbeat:Connect(function()
        if not FLYING or not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then 
            return 
        end
        
        humanoid.PlatformStand = true
        BG.CFrame = camera.CoordinateFrame

        local direction = controlModule:GetMoveVector()
        local targetVel = Vector3.new(0, 0, 0)
        targetVel = targetVel + camera.CFrame.RightVector * (direction.X * flySpeed)
        targetVel = targetVel - camera.CFrame.LookVector * (direction.Z * flySpeed)

        targetVelocity = targetVel
        currentVelocity = currentVelocity:Lerp(targetVelocity, smoothness)
        BV.Velocity = currentVelocity
    end)

    FLYING = true
end

local function NOFLY()
    FLYING = false
    currentVelocity = Vector3.new(0, 0, 0)
    targetVelocity = Vector3.new(0, 0, 0)
    
    if flyKeyDown then flyKeyDown:Disconnect() end
    if flyKeyUp then flyKeyUp:Disconnect() end
    if mfly1 then mfly1:Disconnect() end
    if mfly2 then mfly2:Disconnect() end

    pcall(function()
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local root = LocalPlayer.Character:WaitForChild("HumanoidRootPart")
            local bv = root:FindFirstChild("BodyVelocity")
            local bg = root:FindFirstChild("BodyGyro")
            if bv then bv:Destroy() end
            if bg then bg:Destroy() end
            
            local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.PlatformStand = false
            end
            workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
        end
    end)
    
    if flyButton then
        flyButton.Text = "FLY OFF"
        flyButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    end
    flyGuiEnabled = false
end

local function createFlyGui()
    if flyGui then return end
    
    flyGui = Instance.new("ScreenGui")
    flyGui.Name = "SmallSmoothFlyGUI"
    flyGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
    flyGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    flyGui.ResetOnSpawn = false

    flyButton = Instance.new("TextButton")
    flyButton.Name = "FlyButton"
    flyButton.Parent = flyGui
    flyButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    flyButton.BorderColor3 = Color3.fromRGB(80, 80, 80)
    flyButton.BorderSizePixel = 2
    flyButton.Position = UDim2.new(0, 20, 0, 20)
    flyButton.Size = UDim2.new(0, 120, 0, 30)
    flyButton.Font = Enum.Font.GothamBold
    flyButton.Text = "FLY OFF"
    flyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    flyButton.TextSize = 14
    flyButton.Active = true
    flyButton.Draggable = true

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 8)
    UICorner.Parent = flyButton

    flyButton.MouseButton1Click:Connect(function()
        if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            return
        end
        
        flyGuiEnabled = not flyGuiEnabled
        if flyGuiEnabled then
            flyButton.Text = "FLY ON"
            flyButton.BackgroundColor3 = Color3.fromRGB(0, 120, 0)
            if UserInputService.TouchEnabled then
                MobileFly()
            else
                sFLY()
            end
        else
            flyButton.Text = "FLY OFF"
            flyButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            NOFLY()
        end
    end)
end

local function destroyFlyGui()
    if flyGui then
        flyGui:Destroy()
        flyGui = nil
        flyButton = nil
    end
    flyGuiEnabled = false
end

-- Character Management
local function onCharacterAdded(character)
    if flyToggle then
        flyToggle = false
        destroyFlyGui()
        FlyToggle:SetState(false)
        NOFLY()
    end
    
    if godModeEnabled then
        godModeEnabled = false
        deactivateGodMode()
        GodModeToggle:SetState(false)
    end
    
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.Died:Connect(function()
        if flyToggle then
            destroyFlyGui()
            NOFLY()
        end
        if godModeEnabled then
            deactivateGodMode()
        end
    end)
end

if LocalPlayer.Character then
    onCharacterAdded(LocalPlayer.Character)
end

LocalPlayer.CharacterAdded:Connect(onCharacterAdded)

-- TOH Tab Features
local AutoWinButton = TOHTab:Button({
    Title = "Auto Win",
    Desc = "Teleport to finish line",
    Locked = false,
    Callback = function()
        spawn(function()
            local char = player.Character or player.CharacterAdded:Wait()
            local hrp = char:FindFirstChild("HumanoidRootPart")
            if not hrp then return end

            local finish = nil
            for _, obj in pairs(workspace:GetDescendants()) do
                if obj:IsA("BasePart") and (obj.Name:lower():find("finish") or obj.Name:lower():find("win")) then
                    finish = obj
                    break
                end
            end

            if finish then
                hrp.CFrame = finish.CFrame + Vector3.new(0, 3, 0)
            end
        end)
    end
})

local GodModeToggle = TOHTab:Toggle({
    Title = "God Mode",
    Desc = "Invincibility mode",
    Icon = "shield",
    Type = "Checkbox",
    Default = false,
    Callback = function(state) 
        godModeEnabled = state
        if godModeEnabled then
            activateGodMode()
        else
            deactivateGodMode()
        end
    end
})

local FlyToggle = TOHTab:Toggle({
    Title = "Fly",
    Desc = "Flying mode with smooth controls",
    Icon = "plane",
    Type = "Checkbox",
    Default = false,
    Callback = function(state) 
        flyToggle = state
        if flyToggle then
            createFlyGui()
        else
            if flyGuiEnabled then
                flyGuiEnabled = false
                NOFLY()
            end
            destroyFlyGui()
        end
    end
})

-- Misc Tab Features
local antiAFKEnabled = false
local antiAFKConnection = nil

local function startAntiAFK()
    if antiAFKConnection then return end
    
    antiAFKConnection = RunService.Heartbeat:Connect(function()
        if antiAFKEnabled then
            local VirtualUser = game:GetService("VirtualUser")
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end
    end)
end

local function stopAntiAFK()
    if antiAFKConnection then
        antiAFKConnection:Disconnect()
        antiAFKConnection = nil
    end
end

-- Server Hop System
local selectedPlayerCount = "Any"
local HttpService = game:GetService("HttpService")

local function serverHop(targetPlayerCount)
    local placeId = game.PlaceId
    
    local success, result = pcall(function()
        local serversUrl = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100"
        local servers = HttpService:JSONDecode(game:HttpGet(serversUrl))
        
        local validServers = {}
        for _, server in pairs(servers.data) do
            if server.playing < server.maxPlayers and server.id ~= game.JobId then
                local playerCount = server.playing
                local shouldAdd = false
                
                if targetPlayerCount == "Any" then
                    shouldAdd = true
                else
                    local targetNumber = tonumber(targetPlayerCount)
                    if targetNumber and playerCount == targetNumber then
                        shouldAdd = true
                    end
                end
                
                if shouldAdd then
                    table.insert(validServers, server.id)
                end
            end
        end
        
        if #validServers > 0 then
            local randomServer = validServers[math.random(1, #validServers)]
            TeleportService:TeleportToPlaceInstance(placeId, randomServer)
        else
            TeleportService:Teleport(placeId)
        end
    end)
    
    if not success then
        TeleportService:Teleport(placeId)
    end
end

local PlayerCountDropdown = MiscTab:Dropdown({
    Title = "Server Player Count",
    Values = { "Any", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19" },
    Value = "Any",
    Callback = function(option) 
        selectedPlayerCount = option
    end
})

local ServerHopButton = MiscTab:Button({
    Title = "Server Hop",
    Desc = "Join a server with selected player count",
    Locked = false,
    Callback = function()
        serverHop(selectedPlayerCount)
    end
})

local QuickServerHopButton = MiscTab:Button({
    Title = "Quick Server Hop",
    Desc = "Join any available server",
    Locked = false,
    Callback = function()
        serverHop("Any")
    end
})

local AntiAFKToggle = MiscTab:Toggle({
    Title = "Anti AFK",
    Desc = "Prevents getting kicked for being idle",
    Icon = "clock",
    Type = "Checkbox",
    Default = false,
    Callback = function(state) 
        antiAFKEnabled = state
        if antiAFKEnabled then
            startAntiAFK()
        else
            stopAntiAFK()
        end
    end
})

local RejoinButton = MiscTab:Button({
    Title = "Rejoin Server",
    Desc = "Rejoin the current server",
    Locked = false,
    Callback = function()
        TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, game.Players.LocalPlayer)
    end
})
